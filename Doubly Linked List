class Node{
    int data;
    Node next;
    Node back;
    Node(int data,Node next,Node back)
    {
        this.data=data;
        this.next=next;
        this.back=back;
    }
    Node(int data)
    {
        this.data=data;
        this.next=null;
        this.back=null;
    }
}
class ll{
    private static Node dllcreate(int[] arr)
    {
        Node header=new Node(arr[0]);
        Node prev=header;
        for(int i=1;i<arr.length;i++)
        {
            Node temp=new Node(arr[i],null,prev);
            prev.next=temp;
            prev=temp;
        }
        return header;
    }
    static void display(Node head)
    {
        while(head!=null)
        {
            System.out.print(head.data+" ");
            head=head.next;
        }
    }
    static Node dlthead(Node head)
    {
        if(head==null)
        {
            return null;
        }
        if(head.next==null && head.back==null)
        {
            return null;
        }
        Node temp=head.next;
        temp.back=null;
        head.next=null;
        return temp;
    }
    static Node dlttail(Node head)
    {
        if(head==null || head.next==null)
        {
            return null;
        }
        Node temp=head;
        while(temp.next!=null)
        {
            temp=temp.next;
        }
            Node prev=temp.back;
            prev.next=null;
            temp.back=null;
            return head;


    }
    static Node dltkthele(Node head,int index)
    {


        if(head==null){
            return null;
    }
        if(index==1)
        {
            Node temp=head;
            head=head.next;
            temp.back=null;
            return head;
        }
        Node temp=head;
        int count=0;
        while(temp!=null)
        {
            count++;
            if(count==index)
            {
                if(temp.next==null)
                {
                    Node prev=temp.back;
                    prev.next=null;
                    temp.back=null;
                    return head;
                }
                Node prev=temp.back;
                prev.next=temp.next;
                temp.back=null;
                Node front=temp.next;
                front.back=prev;
            }
            temp=temp.next;

        }

        return head;

    }
    static Node dltele(Node head,int ele)
    {


        if(head==null){
            return null;
        }
        if(ele==head.data)
        {
            Node temp=head;
            head=head.next;
            temp.back=null;
            return head;
        }
        Node temp=head;
        while(temp!=null)
        {

            if(ele==temp.data)
            {
                if(temp.next==null)
                {
                    Node prev=temp.back;
                    prev.next=null;
                    temp.back=null;
                    return head;
                }
                Node prev=temp.back;
                prev.next=temp.next;
                temp.back=null;
                Node front=temp.next;
                front.back=prev;
            }
            temp=temp.next;

        }

        return head;

    }
    static Node inshead(Node head,int data)
    {
        if(head==null)
        {
            return null;
        }

       Node h=new Node(data);
        head.back=h;
        h.next=head;
        return h;
    }
    static Node instail(Node head,int data)
    {
        if(head==null)
        {
            return null;
        }
        Node t=new Node(data);
        Node temp=head;
        while(temp.next!=null)
        {
            temp=temp.next;
        }
        temp.next=t;
        t.back=temp;
        return head;

    }
    static Node inskthpos(Node head,int data,int index)
    {
        Node k=new Node(data);
        int count=0;
        Node temp=head;
        if(head==null)
        {
            return null;
        }
        if(index==1)
        {
            k.next=head;
            head.back=k;
            return k;
        }
        while(temp!=null)
        {
            count++;
            if(index-1==count)
            {
                k.back=temp;
              k.next=temp.next;
              if(k.next!=null){
                 temp.next.back=k;}
              temp.next=k;
              return head;
            }
            temp=temp.next;

        }
        return head;

    }
    static Node insele(Node head,int data,int before) {
        Node e = new Node(data);
        if (head == null) {
            return null;
        }
        Node temp = head;
        if (head.data == before) {
            e.next = head;
            head.back = e;
            return e;
        }
        while (temp != null) {
            if (temp.data == before) {
                e.next = temp;
                e.back = temp.back;
                temp.back.next = e;
                temp.back = e;
            }
            temp = temp.next;

        }
        return head;
    }
    static void thereornot(Node head,int ele)
    {
        int j=6;
        while(head!=null)
        {
            if(head.data==ele)
            {
                j=8;
                System.out.println(ele+" is present");
            }
            head=head.next;
        }
        if (j == 6) {

            System.out.println(ele+"not present");
        }
    }
    static void reversedll(Node head)
    {
        Node temp=head;
        while(temp.next!=null)
        {
            temp=temp.next;
        }
        while(temp!=null)
        {
            System.out.print(temp.data+" ");
            temp=temp.back;
        }

    }


    public static void main(String[] args) {
        int[] arr={11,22,33,44,55};
        Node header=dllcreate(arr);
        display(header);
        System.out.println();
        Node h=dlthead(header);
        display(h);
        System.out.println();
        Node t=dlttail(h);
        display(t);
        System.out.println();
        Node k=dltkthele(t,2);
        display(k);
        System.out.println();
        Node e=dltele(k,33);
        display(e);
        System.out.println();
        Node hi=inshead(e,4);
        display(hi);
        System.out.println();
        Node it=instail(hi,7);
        display(it);
        System.out.println();
        Node ik=inskthpos(it,8,3);
        display(ik);
        System.out.println();
        Node ie=insele(ik,55,4);
        display(ie);
        System.out.println();
        thereornot(ie,9);
        reversedll(ie);

    }


}



